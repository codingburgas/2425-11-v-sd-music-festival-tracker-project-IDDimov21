@page "/home"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using FestivalApp_PL.Auth
@using FestivalApp_DAL.Models
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject NavigationManager Navigation

@code {
    private bool isAuthenticated = false;
    private string userDisplayName = "User";
    private List<Festival> festivals = new();
    private bool showCreateFestivalModal = false;
    private Festival newFestival = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            userDisplayName = user.Identity?.Name ?? "User";
        }

        await LoadFestivals();
    }

    private async Task LoadFestivals()
    {
        try
        {
            festivals = await Http.GetFromJsonAsync<List<Festival>>("http://localhost:5148/api/festivals") ?? new List<Festival>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching festivals: {ex.Message}");
        }
    }

    private void Logout()
    {
        Navigation.NavigateTo("/", forceLoad: true);
    }

    private async Task CreateFestival()
    {
        if (string.IsNullOrWhiteSpace(newFestival.FestivalName) || 
            newFestival.Date == default || 
            newFestival.Time == null)
        {
            Console.WriteLine("All fields are required.");
            return;
        }


        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5148/api/festivals", newFestival);
            if (response.IsSuccessStatusCode)
            {
                newFestival = new Festival(); // Reset form
                showCreateFestivalModal = false;
                await LoadFestivals(); // Refresh the list
            }
            else
            {
                Console.WriteLine("Error creating festival.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}

<div class="container">
    <div class="sidebar">
        <div class="logo-section">
            <span class="logo-name">Music Festival System</span>
        </div>

        <div class="profile">
            <img src="icons/account.png" class="icon" />
            <span class="profile-name">@userDisplayName</span>
        </div>

        <ul class="nav-menu">
            <li>
                <NavLink class="nav-item" href="/dashboard">
                    <img src="icons/dashboard-icon.png" class="icon" />
                    <span class="text">Dashboard</span>
                </NavLink>
            </li>
            <li>
                <NavLink class="nav-item active" href="/home">
                    <img src="icons/calendar-icon.png" class="icon" />
                    <span class="text">Festival List</span>
                </NavLink>
            </li>
        </ul>

        <div class="logout">
            <button class="btn-logout" @onclick="Logout">
                <img src="icons/logout-icons.png" class="icon" />
                <span class="text">Logout</span>
            </button>
        </div>
    </div>

    <div class="main-content">
        <h1 id="festTitle">Festival List</h1>

        <button class="btn-create-fest" @onclick="() => showCreateFestivalModal = true">
            Create Fest
        </button>
        <div class="festival-list">
            @if (festivals.Count == 0)
            {
                <p>No festivals available.</p>
            }
            else
            {
                @foreach (var festival in festivals)
                {
                    <div class="festival-card">
                        <h3>@festival.FestivalName</h3>
                        <p>@festival.Date.ToString("yyyy-MM-dd") | @festival.Time</p>
                        <button class="btn-buy-tickets">Buy Tickets</button>
                    </div>
                }
            }
        </div>
    </div>
</div>

@if (showCreateFestivalModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <h2>Create Festival</h2>
            <div class="form-group">
                <label>Festival Name</label>
                <input type="text" class="form-control" @bind="newFestival.FestivalName" />
            </div>
            <div class="form-group">
                <label>Date</label>
                <input type="date" class="form-control" @bind="newFestival.Date" />
            </div>
            <div class="form-group">
                <label>Time</label>
                <input type="text" class="form-control" @bind="newFestival.Time" placeholder="HH:mm" />
            </div>
            <div class="form-group">
                <label>Ticket Cost ($)</label>
                <input type="number" class="form-control" @bind="newFestival.TicketCost" />
            </div>

            <div class="modal-actions">
                <button class="btn-submit" @onclick="CreateFestival">Create</button>
                <button class="btn-close" @onclick="() => showCreateFestivalModal = false">Cancel</button>
            </div>
        </div>
    </div>
}
